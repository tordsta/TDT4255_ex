circuit CyclicDot : @[:@2.0]
  module CyclicDot : @[:@3.2]
    input clock : Clock @[:@4.4]
    input reset : UInt<1> @[:@5.4]
    input io_dataInA : UInt<32> @[:@6.4]
    input io_dataInB : UInt<32> @[:@6.4]
    output io_dataOut : UInt<32> @[:@6.4]
    output io_outputValid : UInt<1> @[:@6.4]
  
    reg value : UInt<2>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 26:33:@8.4]
    reg accumulator : UInt<32>, clock with :
      reset => (UInt<1>("h0"), accumulator) @[CyclicDot.scala 23:28:@9.4]
    node _T_18 = mul(io_dataInA, io_dataInB) @[CyclicDot.scala 26:44:@11.4]
    node _T_19 = add(accumulator, _T_18) @[CyclicDot.scala 26:30:@12.4]
    node _T_20 = tail(_T_19, 1) @[CyclicDot.scala 26:30:@13.4]
    node _T_22 = eq(value, UInt<2>("h2")) @[Counter.scala 34:24:@15.4]
    node _T_24 = add(value, UInt<1>("h1")) @[Counter.scala 35:22:@16.4]
    node _T_25 = tail(_T_24, 1) @[Counter.scala 35:22:@17.4]
    node _GEN_0 = mux(_T_22, UInt<1>("h0"), _T_25) @[Counter.scala 37:21:@19.4]
    io_dataOut <= accumulator @[CyclicDot.scala 28:14:@22.4]
    io_outputValid <= UInt<1>("h0") @[CyclicDot.scala 25:18:@10.4]
    value <= mux(reset, UInt<2>("h0"), _GEN_0) @[Counter.scala 35:13:@18.4 Counter.scala 37:29:@20.6]
    accumulator <= mux(reset, UInt<1>("h0"), bits(_T_20, 31, 0)) @[CyclicDot.scala 26:15:@14.4]
